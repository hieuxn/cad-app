
export class ColorUtils {
  private static colorNumberToHex: Record<number, number> = {
    0: 0x000000,
    1: 0xFF0000,
    2: 0xFFFF00,
    3: 0x00FF00,
    4: 0x00FFFF,
    5: 0x0000FF,
    6: 0xFF00FF,
    7: 0xFFFFFF,
    8: 0x414141,
    9: 0x808080,
    10: 0xFF0000,
    11: 0xFFAAAA,
    12: 0xBD0000,
    13: 0xBD7E7E,
    14: 0x810000,
    15: 0x815656,
    16: 0x680000,
    17: 0x684545,
    18: 0x4F0000,
    19: 0x4F3535,
    20: 0xFF3F00,
    21: 0xFFBFAA,
    22: 0xBD2E00,
    23: 0xBD8D7E,
    24: 0x811F00,
    25: 0x816056,
    26: 0x681900,
    27: 0x684E45,
    28: 0x4F1300,
    29: 0x4F3B35,
    30: 0xFF7F00,
    31: 0xFFD4AA,
    32: 0xBD5E00,
    33: 0xBD9D7E,
    34: 0x814000,
    35: 0x816B56,
    36: 0x683400,
    37: 0x685645,
    38: 0x4F2700,
    39: 0x4F4235,
    40: 0xFFBF00,
    41: 0xFFEAAA,
    42: 0xBD8D00,
    43: 0xBDAD7E,
    44: 0x816000,
    45: 0x817656,
    46: 0x684E00,
    47: 0x685F45,
    48: 0x4F3B00,
    49: 0x4F4935,
    50: 0xFFFF00,
    51: 0xFFFFAA,
    52: 0xBDBD00,
    53: 0xBDBD7E,
    54: 0x818100,
    55: 0x818156,
    56: 0x686800,
    57: 0x686845,
    58: 0x4F4F00,
    59: 0x4F4F35,
    60: 0xBFFF00,
    61: 0xEAFFAA,
    62: 0x8DBD00,
    63: 0xADBD7E,
    64: 0x608100,
    65: 0x768156,
    66: 0x4E6800,
    67: 0x5F6845,
    68: 0x3B4F00,
    69: 0x494F35,
    70: 0x7FFF00,
    71: 0xD4FFAA,
    72: 0x5EBD00,
    73: 0x9DBD7E,
    74: 0x408100,
    75: 0x6B8156,
    76: 0x346800,
    77: 0x566845,
    78: 0x274F00,
    79: 0x424F35,
    80: 0x3FFF00,
    81: 0xBFFFAA,
    82: 0x2EBD00,
    83: 0x8DBD7E,
    84: 0x1F8100,
    85: 0x608156,
    86: 0x196800,
    87: 0x4E6845,
    88: 0x134F00,
    89: 0x3B4F35,
    90: 0x00FF00,
    91: 0xAAFFAA,
    92: 0x00BD00,
    93: 0x7EBD7E,
    94: 0x008100,
    95: 0x568156,
    96: 0x006800,
    97: 0x456845,
    98: 0x004F00,
    99: 0x354F35,
    100: 0x00FF3F,
    101: 0xAAFFBF,
    102: 0x00BD2E,
    103: 0x7EBD8D,
    104: 0x00811F,
    105: 0x568160,
    106: 0x006819,
    107: 0x45684E,
    108: 0x004F13,
    109: 0x354F3B,
    110: 0x00FF7F,
    111: 0xAAFFD4,
    112: 0x00BD5E,
    113: 0x7EBD9D,
    114: 0x008140,
    115: 0x56816B,
    116: 0x006834,
    117: 0x456856,
    118: 0x004F27,
    119: 0x354F42,
    120: 0x00FFBF,
    121: 0xAAFFEA,
    122: 0x00BD8D,
    123: 0x7EBDAD,
    124: 0x008160,
    125: 0x568176,
    126: 0x00684E,
    127: 0x45685F,
    128: 0x004F3B,
    129: 0x354F49,
    130: 0x00FFFF,
    131: 0xAAFFFF,
    132: 0x00BDBD,
    133: 0x7EBDBD,
    134: 0x008181,
    135: 0x568181,
    136: 0x006868,
    137: 0x456868,
    138: 0x004F4F,
    139: 0x354F4F,
    140: 0x00BFFF,
    141: 0xAAEAFF,
    142: 0x008DBD,
    143: 0x7EADBD,
    144: 0x006081,
    145: 0x567681,
    146: 0x004E68,
    147: 0x455F68,
    148: 0x003B4F,
    149: 0x35494F,
    150: 0x007FFF,
    151: 0xAAD4FF,
    152: 0x005EBD,
    153: 0x7E9DBD,
    154: 0x004081,
    155: 0x566B81,
    156: 0x003468,
    157: 0x455668,
    158: 0x00274F,
    159: 0x35424F,
    160: 0x003FFF,
    161: 0xAABFFF,
    162: 0x002EBD,
    163: 0x7E8DBD,
    164: 0x001F81,
    165: 0x566081,
    166: 0x001968,
    167: 0x454E68,
    168: 0x00134F,
    169: 0x353B4F,
    170: 0x0000FF,
    171: 0xAAAAFF,
    172: 0x0000BD,
    173: 0x7E7EBD,
    174: 0x000081,
    175: 0x565681,
    176: 0x000068,
    177: 0x454568,
    178: 0x00004F,
    179: 0x35354F,
    180: 0x3F00FF,
    181: 0xBFAAFF,
    182: 0x2E00BD,
    183: 0x8D7EBD,
    184: 0x1F0081,
    185: 0x605681,
    186: 0x190068,
    187: 0x4E4568,
    188: 0x13004F,
    189: 0x3B354F,
    190: 0x7F00FF,
    191: 0xD4AAFF,
    192: 0x5E00BD,
    193: 0x9D7EBD,
    194: 0x400081,
    195: 0x6B5681,
    196: 0x340068,
    197: 0x564568,
    198: 0x27004F,
    199: 0x42354F,
    200: 0xBF00FF,
    201: 0xEAAAFF,
    202: 0x8D00BD,
    203: 0xAD7EBD,
    204: 0x600081,
    205: 0x765681,
    206: 0x4E0068,
    207: 0x5F4568,
    208: 0x3B004F,
    209: 0x49354F,
    210: 0xFF00FF,
    211: 0xFFAAFF,
    212: 0xBD00BD,
    213: 0xBD7EBD,
    214: 0x810081,
    215: 0x815681,
    216: 0x680068,
    217: 0x684568,
    218: 0x4F004F,
    219: 0x4F354F,
    220: 0xFF00BF,
    221: 0xFFAAEA,
    222: 0xBD008D,
    223: 0xBD7EAD,
    224: 0x810060,
    225: 0x815676,
    226: 0x68004E,
    227: 0x68455F,
    228: 0x4F003B,
    229: 0x4F3549,
    230: 0xFF007F,
    231: 0xFFAAD4,
    232: 0xBD005E,
    233: 0xBD7E9D,
    234: 0x810040,
    235: 0x81566B,
    236: 0x680034,
    237: 0x684556,
    238: 0x4F0027,
    239: 0x4F3542,
    240: 0xFF003F,
    241: 0xFFAABF,
    242: 0xBD002E,
    243: 0xBD7E8D,
    244: 0x81001F,
    245: 0x815660,
    246: 0x680019,
    247: 0x68454E,
    248: 0x4F0013,
    249: 0x4F353B,
    250: 0x333333,
    251: 0x505050,
    252: 0x696969,
    253: 0x828282,
    254: 0xBEBEBE,
    255: 0xFFFFFF,
  };

  private static hexToColorNumber: Record<number, number>;

  constructor() {
    ColorUtils.hexToColorNumber ??= Object.keys(ColorUtils.colorNumberToHex)
      .reduce((acc, key) => {
        const hexValue = ColorUtils.colorNumberToHex[parseInt(key)];
        acc[hexValue] = parseInt(key);
        return acc;
      }, {} as Record<number, number>);
  }

  getColorByNumber(colorNumber: number): number {
    const color = ColorUtils.colorNumberToHex[colorNumber];
    if (color) return color;
    return 0xFFFFFF;
  }

  getNumberByColor(hexColor: number): number {
    let number = ColorUtils.hexToColorNumber[hexColor];
    if (number) return number;

    let nearestColorKey: number = -1;
    let smallestDifference: number = Number.MAX_VALUE;

    Object.keys(ColorUtils.colorNumberToHex).forEach(key => {
      const colorHex = ColorUtils.colorNumberToHex[parseInt(key)];
      const difference = ColorUtils.colorDifference(hexColor, colorHex);
      if (difference < smallestDifference) {
        smallestDifference = difference;
        nearestColorKey = parseInt(key);
      }
    });

    if (nearestColorKey != -1) {
      ColorUtils.hexToColorNumber[hexColor] = nearestColorKey;
      return nearestColorKey;
    }

    return 255;
  }

  private static colorDifference(hexColor1: number, hexColor2: number): number {
    const r1 = (hexColor1 >> 16) & 0xFF;
    const g1 = (hexColor1 >> 8) & 0xFF;
    const b1 = hexColor1 & 0xFF;

    const r2 = (hexColor2 >> 16) & 0xFF;
    const g2 = (hexColor2 >> 8) & 0xFF;
    const b2 = hexColor2 & 0xFF;

    // Euclidean distance in RGB space
    return Math.pow(r2 - r1, 2) + Math.pow(g2 - g1, 2) + Math.pow(b2 - b1, 2);
  }
}
